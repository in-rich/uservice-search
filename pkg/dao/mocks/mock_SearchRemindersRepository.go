// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-search/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockSearchRemindersRepository is an autogenerated mock type for the SearchRemindersRepository type
type MockSearchRemindersRepository struct {
	mock.Mock
}

type MockSearchRemindersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchRemindersRepository) EXPECT() *MockSearchRemindersRepository_Expecter {
	return &MockSearchRemindersRepository_Expecter{mock: &_m.Mock}
}

// SearchReminders provides a mock function with given fields: ctx, authorID, rawQuery, limit, offset
func (_m *MockSearchRemindersRepository) SearchReminders(ctx context.Context, authorID string, rawQuery string, limit int, offset int) ([]*entities.Reminder, error) {
	ret := _m.Called(ctx, authorID, rawQuery, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for SearchReminders")
	}

	var r0 []*entities.Reminder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) ([]*entities.Reminder, error)); ok {
		return rf(ctx, authorID, rawQuery, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []*entities.Reminder); ok {
		r0 = rf(ctx, authorID, rawQuery, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Reminder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, authorID, rawQuery, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearchRemindersRepository_SearchReminders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchReminders'
type MockSearchRemindersRepository_SearchReminders_Call struct {
	*mock.Call
}

// SearchReminders is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID string
//   - rawQuery string
//   - limit int
//   - offset int
func (_e *MockSearchRemindersRepository_Expecter) SearchReminders(ctx interface{}, authorID interface{}, rawQuery interface{}, limit interface{}, offset interface{}) *MockSearchRemindersRepository_SearchReminders_Call {
	return &MockSearchRemindersRepository_SearchReminders_Call{Call: _e.mock.On("SearchReminders", ctx, authorID, rawQuery, limit, offset)}
}

func (_c *MockSearchRemindersRepository_SearchReminders_Call) Run(run func(ctx context.Context, authorID string, rawQuery string, limit int, offset int)) *MockSearchRemindersRepository_SearchReminders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockSearchRemindersRepository_SearchReminders_Call) Return(_a0 []*entities.Reminder, _a1 error) *MockSearchRemindersRepository_SearchReminders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearchRemindersRepository_SearchReminders_Call) RunAndReturn(run func(context.Context, string, string, int, int) ([]*entities.Reminder, error)) *MockSearchRemindersRepository_SearchReminders_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchRemindersRepository creates a new instance of MockSearchRemindersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchRemindersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchRemindersRepository {
	mock := &MockSearchRemindersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
