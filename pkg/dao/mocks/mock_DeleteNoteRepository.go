// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDeleteNoteRepository is an autogenerated mock type for the DeleteNoteRepository type
type MockDeleteNoteRepository struct {
	mock.Mock
}

type MockDeleteNoteRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeleteNoteRepository) EXPECT() *MockDeleteNoteRepository_Expecter {
	return &MockDeleteNoteRepository_Expecter{mock: &_m.Mock}
}

// DeleteNote provides a mock function with given fields: ctx, authorID, noteID
func (_m *MockDeleteNoteRepository) DeleteNote(ctx context.Context, authorID string, noteID string) error {
	ret := _m.Called(ctx, authorID, noteID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, authorID, noteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeleteNoteRepository_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type MockDeleteNoteRepository_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID string
//   - noteID string
func (_e *MockDeleteNoteRepository_Expecter) DeleteNote(ctx interface{}, authorID interface{}, noteID interface{}) *MockDeleteNoteRepository_DeleteNote_Call {
	return &MockDeleteNoteRepository_DeleteNote_Call{Call: _e.mock.On("DeleteNote", ctx, authorID, noteID)}
}

func (_c *MockDeleteNoteRepository_DeleteNote_Call) Run(run func(ctx context.Context, authorID string, noteID string)) *MockDeleteNoteRepository_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDeleteNoteRepository_DeleteNote_Call) Return(_a0 error) *MockDeleteNoteRepository_DeleteNote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeleteNoteRepository_DeleteNote_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDeleteNoteRepository_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeleteNoteRepository creates a new instance of MockDeleteNoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeleteNoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeleteNoteRepository {
	mock := &MockDeleteNoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
