// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-search/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockSearchNotesRepository is an autogenerated mock type for the SearchNotesRepository type
type MockSearchNotesRepository struct {
	mock.Mock
}

type MockSearchNotesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchNotesRepository) EXPECT() *MockSearchNotesRepository_Expecter {
	return &MockSearchNotesRepository_Expecter{mock: &_m.Mock}
}

// SearchNotes provides a mock function with given fields: ctx, limit, offset, rawQuery, authorID
func (_m *MockSearchNotesRepository) SearchNotes(ctx context.Context, limit int, offset int, rawQuery string, authorID string) ([]*entities.Note, error) {
	ret := _m.Called(ctx, limit, offset, rawQuery, authorID)

	if len(ret) == 0 {
		panic("no return value specified for SearchNotes")
	}

	var r0 []*entities.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) ([]*entities.Note, error)); ok {
		return rf(ctx, limit, offset, rawQuery, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) []*entities.Note); ok {
		r0 = rf(ctx, limit, offset, rawQuery, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, limit, offset, rawQuery, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearchNotesRepository_SearchNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchNotes'
type MockSearchNotesRepository_SearchNotes_Call struct {
	*mock.Call
}

// SearchNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
//   - rawQuery string
//   - authorID string
func (_e *MockSearchNotesRepository_Expecter) SearchNotes(ctx interface{}, limit interface{}, offset interface{}, rawQuery interface{}, authorID interface{}) *MockSearchNotesRepository_SearchNotes_Call {
	return &MockSearchNotesRepository_SearchNotes_Call{Call: _e.mock.On("SearchNotes", ctx, limit, offset, rawQuery, authorID)}
}

func (_c *MockSearchNotesRepository_SearchNotes_Call) Run(run func(ctx context.Context, limit int, offset int, rawQuery string, authorID string)) *MockSearchNotesRepository_SearchNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSearchNotesRepository_SearchNotes_Call) Return(_a0 []*entities.Note, _a1 error) *MockSearchNotesRepository_SearchNotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearchNotesRepository_SearchNotes_Call) RunAndReturn(run func(context.Context, int, int, string, string) ([]*entities.Note, error)) *MockSearchNotesRepository_SearchNotes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchNotesRepository creates a new instance of MockSearchNotesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchNotesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchNotesRepository {
	mock := &MockSearchNotesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
