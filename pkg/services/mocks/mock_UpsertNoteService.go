// Code generated by mockery v2.43.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/in-rich/uservice-search/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUpsertNoteService is an autogenerated mock type for the UpsertNoteService type
type MockUpsertNoteService struct {
	mock.Mock
}

type MockUpsertNoteService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpsertNoteService) EXPECT() *MockUpsertNoteService_Expecter {
	return &MockUpsertNoteService_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, note
func (_m *MockUpsertNoteService) Exec(ctx context.Context, note *models.UpsertNote) (*models.Note, error) {
	ret := _m.Called(ctx, note)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpsertNote) (*models.Note, error)); ok {
		return rf(ctx, note)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpsertNote) *models.Note); ok {
		r0 = rf(ctx, note)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UpsertNote) error); ok {
		r1 = rf(ctx, note)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpsertNoteService_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockUpsertNoteService_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - note *models.UpsertNote
func (_e *MockUpsertNoteService_Expecter) Exec(ctx interface{}, note interface{}) *MockUpsertNoteService_Exec_Call {
	return &MockUpsertNoteService_Exec_Call{Call: _e.mock.On("Exec", ctx, note)}
}

func (_c *MockUpsertNoteService_Exec_Call) Run(run func(ctx context.Context, note *models.UpsertNote)) *MockUpsertNoteService_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UpsertNote))
	})
	return _c
}

func (_c *MockUpsertNoteService_Exec_Call) Return(_a0 *models.Note, _a1 error) *MockUpsertNoteService_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpsertNoteService_Exec_Call) RunAndReturn(run func(context.Context, *models.UpsertNote) (*models.Note, error)) *MockUpsertNoteService_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpsertNoteService creates a new instance of MockUpsertNoteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpsertNoteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpsertNoteService {
	mock := &MockUpsertNoteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
