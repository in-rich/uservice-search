// Code generated by mockery v2.43.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/in-rich/uservice-search/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockCreateTeamMetaService is an autogenerated mock type for the CreateTeamMetaService type
type MockCreateTeamMetaService struct {
	mock.Mock
}

type MockCreateTeamMetaService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateTeamMetaService) EXPECT() *MockCreateTeamMetaService_Expecter {
	return &MockCreateTeamMetaService_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, teamMeta
func (_m *MockCreateTeamMetaService) Exec(ctx context.Context, teamMeta *models.TeamMeta) (*models.TeamMeta, error) {
	ret := _m.Called(ctx, teamMeta)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *models.TeamMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMeta) (*models.TeamMeta, error)); ok {
		return rf(ctx, teamMeta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMeta) *models.TeamMeta); ok {
		r0 = rf(ctx, teamMeta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamMeta) error); ok {
		r1 = rf(ctx, teamMeta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateTeamMetaService_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockCreateTeamMetaService_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - teamMeta *models.TeamMeta
func (_e *MockCreateTeamMetaService_Expecter) Exec(ctx interface{}, teamMeta interface{}) *MockCreateTeamMetaService_Exec_Call {
	return &MockCreateTeamMetaService_Exec_Call{Call: _e.mock.On("Exec", ctx, teamMeta)}
}

func (_c *MockCreateTeamMetaService_Exec_Call) Run(run func(ctx context.Context, teamMeta *models.TeamMeta)) *MockCreateTeamMetaService_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.TeamMeta))
	})
	return _c
}

func (_c *MockCreateTeamMetaService_Exec_Call) Return(_a0 *models.TeamMeta, _a1 error) *MockCreateTeamMetaService_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateTeamMetaService_Exec_Call) RunAndReturn(run func(context.Context, *models.TeamMeta) (*models.TeamMeta, error)) *MockCreateTeamMetaService_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateTeamMetaService creates a new instance of MockCreateTeamMetaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateTeamMetaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateTeamMetaService {
	mock := &MockCreateTeamMetaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
